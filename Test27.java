// 移除元素
// 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

//  

// 说明:

// 为什么返回数值是整数，但输出的答案是数组呢?

// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

// 你可以想象内部操作如下:

// // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
// int len = removeElement(nums, val);

// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
// for (int i = 0; i < len; i++) {
//     print(nums[i]);
// }
// 提示：

// 0 <= nums.length <= 100
// 0 <= nums[i] <= 50
// 0 <= val <= 100

public class Test27 {
    public int removeElement(int[] nums, int val) {//双指针 一个指针指向第一个元素 一个指针指向最后一个元素
        int i = 0;//指向第一个元素
        int j = nums.length - 1;//指向最后一个元素
        while (i <= j) {//如果还有不止一个元素
            if (nums[i] == val) {//判断前面的元素是否是要删除的元素,如果是就把后面的元素移动到前面,然后j--
                nums[i] = nums[j];
                j--;
            } else {//如果前面的元素不是要删除的元素,就i++
                i++;
            }
        }
        return i;
    }    
}
